[EF CORE]
'Add-Migration migrationname' will create the migration from the models. The entities need to be specified in the ApplicationDbContext, see (ENTITYNAMES) below.
Update-Database will create the tables in the database. (make sure you are happy with the fields before applying, eg. nullable: false, data type etc.)
Remove-Migration will remove the last migration created and revert back one level.
Update-Database -Migration InitialCreate14 updates database to a specific migration
TIP: If unable to remove migration because it says that database has already been updated then run 'Update-Database -Migration migrationname' on the previous migration - this
will undo the database update, thereafter run Remove-Migration and it should remove.
Remove-Migration removes only the last migration.

(NAVPROP) Navigation property
Navigation property can be added to the model and used with the .Include(a => a.Assignee) lambda query. Does not require table foreign keys to be specified
however when the next 'Add-Migration InitialCreate' and 'Update-Database' commands are run in the package manager console it will create these foregn keys.
* Note: When creating a navigation proprty eg Public Student Student {get;set;} another property public int StudentId {get;set;} must be created with the correct name and (Id lowercase d) for the FK contraint to be setup properly.

(VALUESandKEYS)
[Key] decelaration to specify this will be the primary key -unless the name is 'Id' or 'ID' then it will automatically do this.
Is identity YES is automatically set when using code first approach. Id will be incremented by SQL.
[Column(TypeName = "varchar(200)")] can be used to explicitly define the value type for which the field will be created in the database.
[MaxLength(10)] specify min or maximum length
[Required] used in <DataAnnotationsValidator /> and <ValidationSummary />

*** IMPORTANT NOTES
(1) navigating with a route parameter from the index page with a parameter that contains a '.' causes a problem. It works fine when navigating from any other page apart from the index page.
This page directive in the _Host.cshtml can be changed to @page "/{**path}" this will allow it to route parameters with '.'
(2) OnInitializedAsync method runs twice on Index page!!! Apparantly this is by design and can cause some real issues. My issues were database writes. Object properties were being overwritten
on alternate calls to this method resulting in incorrect data being written.

(ENTITYNAMES)
Make sure that the entity name and object name are not the same (Assignee is the class and Assignees will be the table name). This can mess with the Navigation Properties
public DbSet<Assignee> Assignees { get; set; }

(STARTUP)
Each interface must be added here as a service. If not then the interface cannot be [Injected] into RazorComponent file. [Inject] in RazorComponent is the same as injecting through a 
regular class using the constructor.

(DATABASE)
Make sure to add user IIS APPPOOL\APITEST and give permission to database

(SELECTCOMPONENT)
This component is bound it "priorityId" variable. It is set to 1 by default so the default position shows Low. Basically when the component is clicked the selected item's
position number is assigned to "priorityId". This position number ties up with the Priorities SQL table position numbers.

(EVENTCALLBACK)
Using my utility class MMDialogs (instantiated as SuccessDialog) there is a callback event in there called "ConfirmationCallBack". The reference to the instanciated object "SuccessDialog"
and the event callback are referenced @ref="SuccessDialog".
The 'linked' method in this class (NewTicket) "ReturnedDialogResult". The output result once the dialog button is clicked is passed back to this method. In this case it does not receive anything to evaluate but if it was
to evaulate a 'Confirm Delete' example it would receive a boolean value "eg. ReturnedDialogResult(bool result)" and the result is evaulated inside this method.
See (EditTicket) Razor page - evaluation is handled here.

(USERROLES)
This section calls the method I created UserInRoles. This method returns a list of string of roles that the provided user belongs to. Users can belong to more than one role
and in this case the applicaiton will not work properly as it uses only the first returned role. As long as you can assign only one user then the program will work fine.

[AUTHENTICATION and PAGES]
To override the default out of the box pages (login, logout, register etc.): right click the project -> add -> new scaffolded item. From the selection on the left choose 'Identity'. Now choose the required
page to override. The overridden pages can be found under Areas/Identity/Pages/Account. They are ASP.NET Core cshtml pages and not the new Blazor pages.
When creating a project and choosing authentication Blazor will automatically create the cascading AuthenticationState to the App.razor file.
There are two ways of handling if the page is shown based on if the user is logged.
(1) first way is by using the AuthorizeView in the html (razor) part of the component:
<AuthorizeView>
    <Authorized>
    page content goes here
    </Authorized>
    <NotAuthorized>
    user is not authorized message goes here
    </NotAuthorized>
</AuthorizeView>

another option: @attribute [Authorize] can be added to the top part of the html section of the razor page. This will validate each routable page. Should work without needing to use <AuthorizeView>
@attribute [Authorize(Roles = "Admin")] same option but with role check

(2) This option is a better way as its handled in the code section rather as one can navigate the user away to the login page if needed with navigationmanager.

[CascadingParameter] public Task<AuthenticationState> authenticationStateTask { get; set; }
if(!authenticationState.User.Identity.IsAuthenticated)

(ACCOUNTLOCKOUT)
I achieve this by setting a lockout date for each user when the user first gets created (in EditUserDetails razor page). Expiry date set to year 9999 so will never be reached.
Then control the lockout by enabling or disabling the LockOutEnabled state to true or false. Failed user login attemps toggle this setting also so failed login resets can
use the same method to re-anable them.

[NAVLINK]
This menu can have multiple selected items highlighted and this explains it. In each menu item it should have a unique href="" element and also Match="NavLinkMatch.All"
This will make the menu item get highlighted when it matches a razorpage with the URL. If two menu items have the same href value then both items will get highlighted when 
visiting that page.

(EMAILNOTIFICATIONS)
User and IT get sent notification when new ticket is created.
User gets notification when support staff claims a ticket.
User gets notified when ticket is placed on hold.
User gets notified when ticket is closed.

[EmailSender]
EmailSender builtin Interface is implemented in my EmailSender class in MM_Utils. I did this because the login page for email verification and password reset uses this interface method.
My class has two other methods which I use in my code. I cannot access these methods through the interface as its builtin and cannot be edited so I instantiate my EmailSender class directly.
The implementation of the builtin interface method is the last method in my class.

ToDo:
Priority - HIGH:
Create search function. Can possibly search by creator, assignee, date, department
Tickets that are old notify alert red on list. As well as send out email every few hours. Something like: New Tickets - 2 hours, Open Tickets - 24 hours, On Hold - 72 hours ????
Above should be done in the Dashboard. Show card list of outstanding tickets, card of tickets open for longer than 48 hours, card of tickets unclaimed for longer than 1 hour,
card of tickets on hold for longer than 5 days. Maybe use dexexpress gridview for this?
How many tickets can a support guy claim at once? 1 only? 2?
Insert image attachments for screenshots of problems etc.
Ranesh requested notifications for any QC tickets, also possibly perhaps see all tickets raised under QC Dept?
Add Personalised ToDo list option on the navbar? for all users

Priority - LOW:

New user or extra priveledges electronic submission and approval.
The user should belong to more than one role. Need to fix this?? - not neccessary can leave as is. When changing user role the code now removes from any previous roles first.
Need to test authorisation. Navigate to pages directly via the url and see if one can access. eg. /EditTicket
I have consolidated roleService and userRoleService into one interface. Could possibly consolidate more of the services to neaten it up? *remember to change startup.cs services 
Claim ticket check - see method Claim_Click(int ticketId) in Index Razor Page

Completed:
Remove weekend and after hours times from response times - added a hack that will not count tickets that were placed on hold in the response time. If a weekend is approaching or ticket 
placed at the end of the day place the ticket on hold and it wont bne counted. Its difficult to subtract all the weekends and after hours to get proper results.

Place number of Open, On hold tickets next to button on top?
From the index page. Add button SEND EMAIL, this will generate a new email in outlook client passing details of the ticket in the subject line,
on the view ticket screen user has a button to respond to the ticket. This will add a comment line with prefix: 'User Response:' and then will send an email to the assignee from noreply
address using the standard emailsender class. There will also be an indication that the user has responded on the index page. Possibly a notification next to the ticket or something,
or better yet change the EDIT button to RESPOND with oi-mail symbol like in the headings ? In querying the TicketDetails table if the last record here contains 'User Response:' then show RESPOND button instead of EDIT, once
the last record no longer contains this then change back to EDIT. User side should also change from VIEW to RESPOND when support sends a response request they can respond to request.
Prefix something like 'Support Resonse:'
Notification Email reads 'Response Required...'

After adding comment, refresh edit ticket page to show the new comment instead of going back to home page.
change javascript notification to nicer bootstrap one for new ticket error - when user has not completed all fields.
When user clicks buttons at top of page it should fetch the data direct from database instead of once when the page is loaded. This will work as a 'refresh' system as well.
Support user should not be able to edit a ticket thats allocated to another support user. Or if he clicks EDIT it will prompt him if he wants to now claim the ticket?
But he will have no history so better if he is allowed to go into the ticket and see its history and then have a button to claim it from there.
Completed: Add a claim ticket button to the page and disable others while this one is active?
Completed: *** Substitute list values are being written to database for some reason
New Tickets - call method GetTicketsAsync(userRole, NewTickets). 
Open Tickets - GetTicketsAsync(userInRole, OpenTickets).
All Tickets - GetTicketsAsync(userInRole, OpenTickets).
The sorting can remain the same. On Initial page load it retreives NewTickets and stores into the 'tickets' List. Tat list can be sorted.
Department name change

Other thoughts:
On Mobile devices the the user manager edit user launches an email client. This is becuase the email address is passed as a parameter and it thinks this is to generate an email.








Code: odds and ends
// Some other stuff might be useful ----------------------------------------------------------------------

Navbar links - need to create int varibale activeTabIndex and then set this value inside the methods called. eg UsersList_Click sets activeTabIndex to 0 and Notifications_Click sets it to 1

<nav class="navbar navbar-expand-sm bg-primary navbar-dark">
            <ul class="navbar-nav">
                @if (activeTabIndex == 0)
                {
                    //Use this in the below nav links to change the pointer to hand 'button type = "button"'
                    <li class="nav-item active">
                        <a class="nav-link" button type="button" @onclick="UsersList_Click">User Management</a>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <a class="nav-link" button type="button" @onclick="UsersList_Click">User Management</a>
                    </li>
                }

                @if (activeTabIndex == 1)
                {
                    <li class="nav-item active">
                        <a class="nav-link" button type="button" @onclick="Notifications_Click">Notification Management</a>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <a class="nav-link" button type="button" @onclick="Notifications_Click">Notification Management</a>
                    </li>
                }
            </ul>
        </nav>        

----------------------------------------------------------------------------------------------------------------------------------

    private async Task Others()
    {
        string ADMINISTRATION_ROLE = "Administrators";

        // Get the current logged in user
        var CurrentUser = (await authenticationStateTask).User;

        // ensure there is a ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);

        if (RoleResult == null)
        {

            // Create ADMINISTRATION_ROLE Role
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }

        // Ensure a user is an Administrator
        var user = await _UserManager.FindByNameAsync(CurrentUser.Identity.Name);

        if (user != null)
        {

            // Is Admin@BlazorHelpWebsite.com in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);

            if (!UserResult)
            {

                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }
    }

   -- In Razor Html Section

   <AuthorizeView>
        <Authorized>
            @if (@context.User.IsInRole("Administrators"))
            {
                <p>You are an Administrator</p>
                @userIsSupportStaff = true;
            }
            else
            {
                <p>You are not an Administrator</p>
            }
        </Authorized>
    </AuthorizeView>


    --- Removed Code ---

    ////Rewrite ticket list substituting guid's with user names ----------------------------------
        //// Get a list of all users
        //var allUsers = await userDetailService.GetAllUserDetailsAsync();

        //// Substitute guid's with names
        //List<Ticket> SubstituteList = new List<Ticket>();
        //var ticketsTemp = await ticketService.GetTicketsAsync();
        //foreach (var item in ticketsTemp)
        //{
        //    var substitute = allUsers.FirstOrDefault(i => i.GUID == item.AssigneeGUID);
        //    if (substitute != null)
        //        item.AssigneeGUID = $"{substitute.FirstName} {substitute.LastName}";
        //    //else
        //    //    item.AssigneeGUID = "Not Assigned"; // be careful. Using this will cause problems when creating new tickets. New ticket will mark all other tickets with 'Not Assigned' - need to investigate this still...

        //    SubstituteList.Add(item);
        //}

        //tickets = SubstituteList;

        //// clear to save memory
        //ticketsTemp = null;
        //SubstituteList = null;
        //// -----------------------------------------------------------------------------------------


        // Below section was used for showing sorting arrows next to headers. Worked well but did not look good when table has wide columns with lots of data, especially long desriptions

        @if (arrowToggle_Ticket)
       {
           <th @onclick="@(() => Sort("Ticket"))">Ticket<span class="oi oi-caret-top"></span></th>
       }
       else
       {
           <th @onclick="@(() => Sort("Ticket"))">Ticket<span class="oi oi-caret-bottom"></span></th>
       }
       
       @if (arrowToggle_Logged)
       {
           <th @onclick="@(() => Sort("Logged"))">Logged<span class="oi oi-caret-top"></span></th>
       }
       else
       {
           <th @onclick="@(() => Sort("Logged"))">Logged<span class="oi oi-caret-bottom"></span></th>
       }
       
       @if (arrowToggle_Creator)
       {
           <th @onclick="@(() => Sort("Creator"))">Creator<span class="oi oi-caret-top"></span></th>
       }
       else
       {
           <th @onclick="@(() => Sort("Creator"))">Creator<span class="oi oi-caret-bottom"></span></th>
       }
       
       <th @onclick="@(() => Sort("Subject"))">Subject</th>
       
       @if (arrowToggle_Priority)
       {
           <th @onclick="@(() => Sort("Priority"))">Priority<span class="oi oi-caret-top"></span></th>
       }
       else
       {
           <th @onclick="@(() => Sort("Priority"))">Priority<span class="oi oi-caret-bottom"></span></th>
       }
       
       @if (arrowToggle_Status)
       {
           <th @onclick="@(() => Sort("Status"))">Status<span class="oi oi-caret-top"></span></th>
       }
       else
       {
           <th @onclick="@(() => Sort("Status"))">Status<span class="oi oi-caret-bottom"></span></th>
       }
       
       @if (arrowToggle_Assigned)
       {
           <th @onclick="@(() => Sort("Assigned"))">Assigned<span class="oi oi-caret-top"></span></th>
       }
       else
       {
           <th @onclick="@(() => Sort("Assigned"))">Assigned<span class="oi oi-caret-bottom"></span></th>
       }

        